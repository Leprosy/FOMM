/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Tools;

import RPG.Tile;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;

/**
 *
 * @author mrojas
 */
public class Mapedit extends javax.swing.JFrame {

    /**
     * Creates new form Editor
     */

    public static Tile[][] map;
    public static int X = 0;
    public static int Y = 0;
    public static javax.swing.JCheckBox[] flags = new javax.swing.JCheckBox[RPG.Tile.FLAGS];

    final static int M_WIDTH  = 16;
    final static int M_HEIGHT = 16;
    final static int T_WIDTH  = 20;
    final static int T_HEIGHT = 20;
    

    public Mapedit() {
        initComponents();

        Mapedit.map = new Tile[M_HEIGHT][M_WIDTH];

        for (int i = 0; i < M_WIDTH; ++i) {
            for (int j = 0; j < M_WIDTH; ++j) {
                Mapedit.map[i][j] = new Tile();
            }
        }
        
        Mapedit.flags[0] = this.jCheckBox1;
        Mapedit.flags[1] = this.jCheckBox2;
        Mapedit.flags[2] = this.jCheckBox3;
        Mapedit.flags[3] = this.jCheckBox4;
        Mapedit.flags[4] = this.jCheckBox5;
        Mapedit.flags[5] = this.jCheckBox6;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Flags = new javax.swing.JPanel();
        Hint = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        Mapview = new Mapview();
        BaseIcons = new javax.swing.JLabel();
        BaseIcons_Label = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        WallIcons = new javax.swing.JLabel();
        WallIcons_Label = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fans of Might & Magic - Mapedit");

        Flags.setBorder(javax.swing.BorderFactory.createTitledBorder("Flags"));

        Hint.setText(" ");

        jCheckBox1.setText("Impassable");
        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseClicked(evt);
            }
        });

        jCheckBox2.setText("Door");
        jCheckBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox2MouseClicked(evt);
            }
        });

        jCheckBox3.setText("Grate");
        jCheckBox3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox3MouseClicked(evt);
            }
        });

        jCheckBox4.setText("Water");
        jCheckBox4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox4MouseClicked(evt);
            }
        });

        jCheckBox5.setText("Secret");
        jCheckBox5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox5MouseClicked(evt);
            }
        });

        jCheckBox6.setText("Deep water");
        jCheckBox6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout FlagsLayout = new javax.swing.GroupLayout(Flags);
        Flags.setLayout(FlagsLayout);
        FlagsLayout.setHorizontalGroup(
            FlagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FlagsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FlagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Hint)
                    .addGroup(FlagsLayout.createSequentialGroup()
                        .addGroup(FlagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addComponent(jCheckBox2)
                            .addComponent(jCheckBox3)
                            .addComponent(jCheckBox4)
                            .addComponent(jCheckBox5)
                            .addComponent(jCheckBox6))
                        .addGap(0, 60, Short.MAX_VALUE)))
                .addContainerGap())
        );
        FlagsLayout.setVerticalGroup(
            FlagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FlagsLayout.createSequentialGroup()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Hint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(127, 127, 127))
        );

        Mapview.setBackground(new java.awt.Color(1, 1, 1));
        Mapview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MapviewMouseClicked(evt);
            }
        });
        Mapview.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MapviewMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout MapviewLayout = new javax.swing.GroupLayout(Mapview);
        Mapview.setLayout(MapviewLayout);
        MapviewLayout.setHorizontalGroup(
            MapviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 345, Short.MAX_VALUE)
        );
        MapviewLayout.setVerticalGroup(
            MapviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 323, Short.MAX_VALUE)
        );

        BaseIcons.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/images/base.png"))); // NOI18N
        BaseIcons.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BaseIcons.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BaseIconsMouseClicked(evt);
            }
        });

        BaseIcons_Label.setText("Bases...");

        jButton1.setText("Select");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        WallIcons.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/images/wall.png"))); // NOI18N
        WallIcons.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        WallIcons.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                WallIconsMouseClicked(evt);
            }
        });

        WallIcons_Label.setText("Walls...");

        jButton2.setText("Select");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save this crap");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Mapview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Flags, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BaseIcons)
                                .addGap(18, 18, 18)
                                .addComponent(BaseIcons_Label)
                                .addGap(3, 3, 3)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(WallIcons)
                                .addGap(18, 18, 18)
                                .addComponent(WallIcons_Label)
                                .addGap(3, 3, 3)
                                .addComponent(jButton2)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Flags, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(Mapview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BaseIcons)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BaseIcons_Label)
                            .addComponent(jButton1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(WallIcons)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(WallIcons_Label)
                            .addComponent(jButton2))))
                .addContainerGap(86, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        //Save the fucking map
        try {
            //Filechoose dialog
            JFileChooser fc = new JFileChooser();
            fc.showDialog(this, "Save this crap!");
            DataOutputStream os = new DataOutputStream(new FileOutputStream(fc.getSelectedFile().toString()));

            //Map meta width, height, start coordinates
            os.writeByte((byte)Mapedit.M_WIDTH);
            os.writeByte((byte)Mapedit.M_HEIGHT);
            os.writeByte((byte)1);
            os.writeByte((byte)1); /** @todo: fix this! user must _select starting point*/


            // Close
            os.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void MapviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MapviewMouseClicked
        Mapedit.X = evt.getX() / T_WIDTH;
        Mapedit.Y = evt.getY() / T_HEIGHT;
        
        // Flags
        for (int i = 0; i < Mapedit.flags.length; ++i) {
            Mapedit.flags[i].setSelected(Mapedit.map[Mapedit.X][Mapedit.Y].flags[i]);
        }

        // Put selected tile in the map
        try {
            Mapedit.map[Mapedit.X][Mapedit.Y].base = (byte)Integer.parseInt(this.BaseIcons_Label.getText());
        } catch (Exception e) {}
        // selected wall...
        try {
            Mapedit.map[Mapedit.X][Mapedit.Y].wall = (byte)Integer.parseInt(this.WallIcons_Label.getText());
        } catch (Exception e) {}

        this.Mapview.repaint();
    }//GEN-LAST:event_MapviewMouseClicked

    private void BaseIconsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BaseIconsMouseClicked
        this.BaseIcons_Label.setText(evt.getX() / Mapedit.T_WIDTH + 5 * (evt.getY() / Mapedit.T_HEIGHT) + "");
    }//GEN-LAST:event_BaseIconsMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.BaseIcons_Label.setText("Bases...");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void WallIconsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WallIconsMouseClicked
        this.WallIcons_Label.setText(evt.getX() / Mapedit.T_WIDTH + 5 * (evt.getY() / Mapedit.T_HEIGHT) + "");
    }//GEN-LAST:event_WallIconsMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.WallIcons_Label.setText("Walls...");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MouseClicked
        Mapedit.map[Mapedit.X][Mapedit.Y].flags[0] = !Mapedit.map[Mapedit.X][Mapedit.Y].flags[0];
    }//GEN-LAST:event_jCheckBox1MouseClicked

    private void jCheckBox2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox2MouseClicked
        Mapedit.map[Mapedit.X][Mapedit.Y].flags[1] = !Mapedit.map[Mapedit.X][Mapedit.Y].flags[1];
    }//GEN-LAST:event_jCheckBox2MouseClicked

    private void jCheckBox3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox3MouseClicked
        Mapedit.map[Mapedit.X][Mapedit.Y].flags[2] = !Mapedit.map[Mapedit.X][Mapedit.Y].flags[2];
    }//GEN-LAST:event_jCheckBox3MouseClicked

    private void jCheckBox5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox5MouseClicked
        Mapedit.map[Mapedit.X][Mapedit.Y].flags[4] = !Mapedit.map[Mapedit.X][Mapedit.Y].flags[4];
    }//GEN-LAST:event_jCheckBox5MouseClicked

    private void jCheckBox4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox4MouseClicked
        Mapedit.map[Mapedit.X][Mapedit.Y].flags[3] = !Mapedit.map[Mapedit.X][Mapedit.Y].flags[3];
    }//GEN-LAST:event_jCheckBox4MouseClicked

    private void jCheckBox6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox6MouseClicked
        Mapedit.map[Mapedit.X][Mapedit.Y].flags[5] = !Mapedit.map[Mapedit.X][Mapedit.Y].flags[5];
    }//GEN-LAST:event_jCheckBox6MouseClicked

    private void MapviewMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MapviewMouseDragged
        Mapedit.X = evt.getX() / T_WIDTH;
        Mapedit.Y = evt.getY() / T_HEIGHT;
        
        // Flags
        for (int i = 0; i < Mapedit.flags.length; ++i) {
            Mapedit.flags[i].setSelected(Mapedit.map[Mapedit.X][Mapedit.Y].flags[i]);
        }

        // Put selected tile in the map
        try {
            Mapedit.map[Mapedit.X][Mapedit.Y].base = (byte)Integer.parseInt(this.BaseIcons_Label.getText());
        } catch (Exception e) {}
        // selected wall...
        try {
            Mapedit.map[Mapedit.X][Mapedit.Y].wall = (byte)Integer.parseInt(this.WallIcons_Label.getText());
        } catch (Exception e) {}

        this.Mapview.repaint();
    }//GEN-LAST:event_MapviewMouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mapedit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mapedit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mapedit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mapedit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Mapedit().setVisible(true);
            }
        });
    }

    /**
     *  Domestic methods
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BaseIcons;
    private javax.swing.JLabel BaseIcons_Label;
    private javax.swing.JPanel Flags;
    private javax.swing.JTextField Hint;
    private javax.swing.JPanel Mapview;
    private javax.swing.JLabel WallIcons;
    private javax.swing.JLabel WallIcons_Label;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem saveAsMenuItem;
    // End of variables declaration//GEN-END:variables
}

class Mapview extends javax.swing.JPanel {
    private BufferedImage base;
    private BufferedImage wall;
    private BufferedImage thing;

    public Mapview() {
        try {
            this.base = ImageIO.read(getClass().getResource("/Assets/images/base.png"));
            this.wall = ImageIO.read(getClass().getResource("/Assets/images/wall.png"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void paintComponent(java.awt.Graphics g) {
        super.paintComponent(g);
        int w = Mapedit.T_WIDTH;
        int h = Mapedit.T_HEIGHT;

        // Draw map
        for (int i = 0; i < Mapedit.M_WIDTH; ++i) {
            for (int j = 0; j < Mapedit.M_HEIGHT; ++j) {
                g.setColor(Color.yellow);
                g.drawString(Mapedit.map[i][j].base + "", i * Mapedit.T_WIDTH + 10, j * Mapedit.T_HEIGHT + 10);
                
                int base = Mapedit.map[i][j].base;
                int wall = Mapedit.map[i][j].wall;
                g.drawImage(this.base, 
                        i * w, j * h, (i+1) * w, (j+1) * h, 
                        (base%5) * w, (int)(base/5) * h, (base%5 + 1) * w, ((int)(base/5) + 1) * h, 
                        this);
                g.drawImage(this.wall, 
                        i * w, j * h, (i+1) * w, (j+1) * h, 
                        (wall%5) * w, (int)(wall/5) * h, (wall%5 + 1) * w, ((int)(wall/5) + 1) * h, 
                        this);
            }
        }

        //Cursor
        g.setColor(Color.WHITE);
        g.drawRect(Mapedit.X * Mapedit.T_WIDTH, Mapedit.Y * Mapedit.T_HEIGHT, Mapedit.T_WIDTH, Mapedit.T_HEIGHT);
    }
}