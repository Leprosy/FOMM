/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Tools;

import RPG.Tile;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import javax.swing.JFileChooser;

/**
 *
 * @author mrojas
 */
public class Mapedit extends javax.swing.JFrame {

    /**
     * Creates new form Editor
     */

    public static Tile[][] map;
    public static int X = 0;
    public static int Y = 0;
    public static javax.swing.JCheckBox[] flags = new javax.swing.JCheckBox[6];
    
    final static int M_WIDTH  = 16;
    final static int M_HEIGHT = 16;
    final static int T_WIDTH  = 20;
    final static int T_HEIGHT = 20;
    

    public Mapedit() {
        initComponents();

        this.map = new Tile[M_HEIGHT][M_WIDTH];

        for (int i = 0; i < M_WIDTH; ++i) {
            for (int j = 0; j < M_WIDTH; ++j) {
                this.map[i][j] = new Tile();
            }
        }
 
       /* for (int i = 1; i < 7; ++i) {
            this.flags[i - 1] = this."jCheckBox" + i;
        } */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Flags = new javax.swing.JPanel();
        Hint = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        Mapview = new Mapview();
        BaseIcons = new javax.swing.JLabel();
        BaseIcons_Label = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fans of Might & Magic - Mapedit");

        Flags.setBorder(javax.swing.BorderFactory.createTitledBorder("Flags"));

        Hint.setText(" ");

        jCheckBox1.setText("Impassable");

        jCheckBox2.setText("Door");

        jCheckBox3.setText("Grate");

        jCheckBox4.setText("Water");

        jCheckBox5.setText("Secret");

        jCheckBox6.setText("Deep water");

        javax.swing.GroupLayout FlagsLayout = new javax.swing.GroupLayout(Flags);
        Flags.setLayout(FlagsLayout);
        FlagsLayout.setHorizontalGroup(
            FlagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FlagsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FlagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Hint)
                    .addGroup(FlagsLayout.createSequentialGroup()
                        .addGroup(FlagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addComponent(jCheckBox2)
                            .addComponent(jCheckBox3)
                            .addComponent(jCheckBox4)
                            .addComponent(jCheckBox5)
                            .addComponent(jCheckBox6))
                        .addGap(0, 60, Short.MAX_VALUE)))
                .addContainerGap())
        );
        FlagsLayout.setVerticalGroup(
            FlagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FlagsLayout.createSequentialGroup()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Hint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(127, 127, 127))
        );

        Mapview.setBackground(new java.awt.Color(1, 1, 1));
        Mapview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MapviewMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout MapviewLayout = new javax.swing.GroupLayout(Mapview);
        Mapview.setLayout(MapviewLayout);
        MapviewLayout.setHorizontalGroup(
            MapviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 345, Short.MAX_VALUE)
        );
        MapviewLayout.setVerticalGroup(
            MapviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 323, Short.MAX_VALUE)
        );

        BaseIcons.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/images/base.png"))); // NOI18N
        BaseIcons.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BaseIcons.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BaseIconsMouseClicked(evt);
            }
        });

        BaseIcons_Label.setText("Bases...");

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save this crap");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BaseIcons)
                        .addGap(18, 18, 18)
                        .addComponent(BaseIcons_Label)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Mapview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Flags, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Flags, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Mapview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(BaseIcons))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(BaseIcons_Label)))
                .addContainerGap(96, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        //Save the fucking map
        try {
            //Filechoose dialog
            JFileChooser fc = new JFileChooser();
            fc.showDialog(this, "Save this crap!");
            DataOutputStream os = new DataOutputStream(new FileOutputStream(fc.getSelectedFile().toString()));

            //Map meta width, height, start coordinates
            os.writeByte((byte)this.M_WIDTH);
            os.writeByte((byte)this.M_HEIGHT);
            os.writeByte((byte)1);
            os.writeByte((byte)1); /** @todo: fix this! user must _select starting point*/


            // Close
            os.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void MapviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MapviewMouseClicked
        Mapedit.X = evt.getX() / T_WIDTH;
        Mapedit.Y = evt.getY() / T_HEIGHT;
        
        // Put selected tile in the map
        Mapedit.map[Mapedit.X][Mapedit.Y].base = (byte)Integer.parseInt(this.BaseIcons_Label.getText());

        //
        this.Mapview.repaint();
    }//GEN-LAST:event_MapviewMouseClicked

    private void BaseIconsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BaseIconsMouseClicked
        this.BaseIcons_Label.setText(evt.getX() / Mapedit.T_WIDTH + 5 * (evt.getY() / Mapedit.T_HEIGHT) + "");
    }//GEN-LAST:event_BaseIconsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mapedit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mapedit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mapedit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mapedit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Mapedit().setVisible(true);
            }
        });
    }

    /**
     *  Domestic methods
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BaseIcons;
    private javax.swing.JLabel BaseIcons_Label;
    private javax.swing.JPanel Flags;
    private javax.swing.JTextField Hint;
    private javax.swing.JPanel Mapview;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem saveAsMenuItem;
    // End of variables declaration//GEN-END:variables
}

class Mapview extends javax.swing.JPanel {
    @Override
    public void paintComponent(java.awt.Graphics g) {
        super.paintComponent(g);

        // Draw map
        for (int i = 0; i < Mapedit.M_WIDTH; ++i) {
            for (int j = 0; j < Mapedit.M_HEIGHT; ++j) {
                g.setColor(Color.yellow);
                g.drawString(Mapedit.map[i][j].base + "", i * Mapedit.T_WIDTH, j * Mapedit.T_HEIGHT);
                
                g.setColor(new java.awt.Color(Mapedit.map[i][j].base * 60, 0, 0));
                g.drawRect(i * Mapedit.T_WIDTH, j * Mapedit.T_HEIGHT, Mapedit.T_WIDTH, Mapedit.T_HEIGHT);
            }
        }

        //Cursor
        g.setColor(Color.WHITE);
        g.drawRect(Mapedit.X * Mapedit.T_WIDTH, Mapedit.Y * Mapedit.T_HEIGHT, Mapedit.T_WIDTH, Mapedit.T_HEIGHT);
    }
}